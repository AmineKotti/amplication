/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Produit } from "@prisma/client";

export class ProduitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ProduitFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProduitFindManyArgs>
  ): Promise<number> {
    return this.prisma.produit.count(args);
  }

  async findMany<T extends Prisma.ProduitFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProduitFindManyArgs>
  ): Promise<Produit[]> {
    return this.prisma.produit.findMany(args);
  }
  async findOne<T extends Prisma.ProduitFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProduitFindUniqueArgs>
  ): Promise<Produit | null> {
    return this.prisma.produit.findUnique(args);
  }
  async create<T extends Prisma.ProduitCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProduitCreateArgs>
  ): Promise<Produit> {
    return this.prisma.produit.create<T>(args);
  }
  async update<T extends Prisma.ProduitUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProduitUpdateArgs>
  ): Promise<Produit> {
    return this.prisma.produit.update<T>(args);
  }
  async delete<T extends Prisma.ProduitDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProduitDeleteArgs>
  ): Promise<Produit> {
    return this.prisma.produit.delete(args);
  }
}
